class Solution {
    public boolean equationsPossible(String[] equations) {
        UnionFind uf = new UnionFind(26);
        for(String str: equations){
            if(str.charAt(1)=='='){
                Character a = str.charAt(0);
                Character b = str.charAt(3);
                uf.union(a-'a',b-'a');
            }
            
        }
        for(String str: equations){
            if(str.charAt(1)=='!'){
                Character a = str.charAt(0);
                Character b = str.charAt(3);
                if(uf.isConnected(a-'a',b-'a')){
                    return false;
                }
            }
            
        }
        return true;
    }
}
//This is a union find class contains two method union and find
class UnionFind{
    int[] parent;
    UnionFind(int nodes){
        parent = new int[nodes];
        for(int i=0;i<nodes;i++){
            parent[i]=i;
        }
    }
    
    //union Method returns void calls find method
    public void union(int node1, int node2){
        int root1 = find(node1);
        int root2 = find(node2);
        if(root1!=root2){
            parent[root1]=root2;
        }
    }
    
    //Find method to return int
    public int find(int node){
        while(parent[node]!=node){
            parent[node] = parent[parent[node]];
            node = parent[node];
        }
        return node;
    }
    
    //checking connected or not by find method and returns boolean
    public boolean isConnected(int node1, int node2){
        return find(node1)==find(node2) ? true:false;
    }
}
        
    
