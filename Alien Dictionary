class Solution
{
    String ans = "";
    public String findOrder(String [] dict, int N, int K){
        //create graph and perform dfs
        //make ans variable to return string, and fill ans string in dfs
        Map<Integer,List<Integer>> map = new HashMap<>();
        for(int i=0;i<=K;i++){
            map.put(i, new ArrayList<Integer>());
        }
        for(int i=0;i<N-1;i++){
            String w1 = dict[i];
            String w2 = dict[i+1];
            int min_length = Math.min(w1.length(), w2.length());
            for(int j=0;j<min_length;j++){
                if(w1.charAt(j)!=w2.charAt(j)){
                    map.get(w1.charAt(j)-'a').add(w2.charAt(j)-'a');
                    break;
                }
            }
            
        }
        boolean[] vis = new boolean[K+1];
        for(int i=0;i<K+1;i++){
            if(!vis[i]){
                dfs(i,map,vis);
            }
        }
        return ans;
    }
    
    public void dfs(int start, Map<Integer,List<Integer>> map , boolean[] vis){
        vis[start]=true;
        for(int ele: map.get(start)){
            if(!vis[ele]){
                dfs(ele,map,vis);
            }
        }
        char ch = (char)(start+'a');
        ans=ch+ans;
      
    }
}
 
