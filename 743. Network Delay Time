// implementing dijkastra, can also be found by bellman ford
//after implementing, check if any distance is infinity or not, if infnity return -1;
//else retirn max distance
class Pair implements Comparator<Pair>{
    int distance;
    int node;
    
    Pair(int distance, int node){
        this.distance=distance;
        this.node=node;
    }
    Pair(){
        
    }
    int getDistance(){
        return distance;
    }
    int getNode(){
        return node;
    }
    
    @Override
    public int compare(Pair p1, Pair p2) 
    { 
        if (p1.distance < p2.distance) 
            return -1; 
        if (p1.distance > p2.distance) 
            return 1; 
        return 0; 
    } 
}
class Solution{
    public int networkDelayTime(int[][] times, int n, int k) {
        Map<Integer,List<Pair>> map = new HashMap<>();
        for(int i=0;i<n+1;i++){
            map.put(i,new ArrayList<Pair>());
        }
        for(int[] ele: times){
            map.get(ele[0]).add(new Pair(ele[2],ele[1]));
           
        }
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>(n+1, new Pair());
        int[] dis = new int[n+1];
        for(int i=1;i<=n;i++){
            dis[i]=Integer.MAX_VALUE;
            
        }
        dis[k]=0;
        pq.add(new Pair(dis[k],k));
        
        while(pq.size()>0){
            
            Pair pair = pq.poll();
            int u = pair.getNode();
            
            for(Pair multiplePairs: map.get(u)){
                if(dis[u]+multiplePairs.getDistance() < dis[multiplePairs.getNode()]) {
                    dis[multiplePairs.getNode()] = dis[u]+multiplePairs.getDistance();
                    pq.add(new Pair(dis[multiplePairs.getNode()],multiplePairs.getNode()));
                }
            }
     
            
            
        }
        int max=Integer.MIN_VALUE;
        for(int i=1;i<=n;i++){
            if(i!=k && dis[i]==Integer.MAX_VALUE){
                return -1;
            }
            max = Math.max(max,dis[i]);
            
        }
        return max;    
    }
}

//Implementing the same question by Bellman Ford

// class Node{
//     private int u;
//     private int v;
//     private int weight;
    
//     Node(int u, int v, int weight){
//         this.u=u;
//         this.v=v;
//         this.weight=weight;
//     }
//     Node(){
        
//     }
//     int getU(){
//         return u;
//     }
//     int getV(){
//         return v;
//     }
//     int getWeight(){
//         return weight;
//     }
// }
// class Solution{
//     public int networkDelayTime(int[][] times, int n, int k) {
//         List<Node> adj = new ArrayList<Node>();
        
//         int[] dis = new int[n+1];
//         for(int i=1;i<n+1;i++){
//             dis[i]=Integer.MAX_VALUE;
//         }
//         dis[k]=0;
//         int vertices = n-1;
        
    
//         for(int[] ele: times){
//             adj.add(new Node(ele[0],ele[1],ele[2]));
//         }
       
//         for(int i=1;i<=vertices; i++){
//             for(Node node: adj){
//                 int u1= node.getU();
//                 int v1 = node.getV();
//                 int weight1 =  node.getWeight();
//                 if(dis[u1]+weight1<dis[v1]){
//                     dis[v1]=dis[u1]+weight1;
//                 }
//             }
//         }
//         for(int ele:dis){
//             System.out.println(ele);
//         }
//         return 1;
//     }
// } 
